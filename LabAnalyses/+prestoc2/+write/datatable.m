function tab = datatable(basedir)

if nargin == 0
   [~,~,RAW] = xlsread('Data_preSTOC2.xlsx');
else
   [~,~,RAW] = xlsread([basedir filesep 'Data_preSTOC2.xlsx']);
end

varNames = RAW(1,:);
RAW(1,:) = [];

ind = isnan([RAW{:,1}]');
RAW(ind,:) = [];

varTable = {'Id' 'NUMPAT' 'num';...
 'Nom' 'NOM' 'str';...
 'Pnom' 'PNOM' 'str';...
 'Sex' 'Sexe' 'str';...
 'DOB' 'DNAISS' 'date';...
 'Age' 'Age' 'num';...
 'Arm' 'Bras' 'str';...
 'Visit' 'VISIT' 'str';...
 'Condition' 'stim' 'str';...
 'Treatment' 'location' 'str';...
 'Period' 'location_rank' 'num';...
 'YBOCS' 'YBOCSTOT' 'num';...
 'YBOCS_OBSESSION' 'OBSSCORETOT' 'num';...
 'YBOCS_COMPULSION' 'COMPSCORETOT' 'num';...
 'BAS' 'BASSCORE' 'num';...
 'MADRS' 'TOTMADRS' 'num';...
 'SF36' 'SF36' 'num';...
 };
 
for i = 1:size(varTable,1)
   ind = strcmp(varTable{i,2},varNames);
   switch varTable{i,3}
      case 'num'
         temp = RAW(:,ind);
         ind2 = cellfun(@isnumeric,temp);
         if any(~ind2)
            temp{~ind2} = NaN;
         end
         cellfun(@isnumeric,RAW(:,ind));
         s.(varTable{i,1}) = [temp{:}]';
      case 'str'
         s.(varTable{i,1}) = RAW(:,ind);
      case 'date'
         temp = cellfun(@(x) datestr(x2mdate(x),'mm/dd/yyyy'),RAW(:,ind),'uni',false);
         s.(varTable{i,1}) = temp;
   end
end

if nargin == 0
   [A,B,RAW] = xlsread('PARASTIM_resaved.xls');
else
   [A,B,RAW] = xlsread([basedir filesep 'PARASTIM_resaved.xls']);   
end

varNames = RAW(1,:);
RAW(1,:) = [];

ind = isnan([RAW{:,1}]');
RAW(ind,:) = [];

varTable = {'Id' 'NUMPAT' 'num';...
 'Height' 'TAILLE' 'num';...
 'Visit' 'VISIT' 'str';...
 'DateVisit' 'DVISIT' 'date';...
 'Weight' 'POIDS' 'num';...
 'HeartRate' 'FRECARD' 'num';...
 'PressureSystolic' 'PRESSARTSYS' 'num';...
 'PressureDiastolic' 'PRESSARTDIAS' 'num';...
 'MODIFSTIM' 'MODIFSTIM' 'str';...
 'ECIBLE' 'ECIBLE' 'str';...
 'PECIBLE1' 'PECIBLE1' 'str';...
 'PEC1CASE' 'PEC1CASE' 'str';...
 'PEC1P0' 'PEC1P0' 'str';...
 'PEC1P1' 'PEC1P1' 'str';...
 'PEC1P2' 'PEC1P2' 'str';...
 'PEC1P3' 'PEC1P3' 'str';...
 'PEAMPGD' 'PEAMPGD' 'num';...
 'PEFREQGD' 'PEFREQGD' 'num';...
 'PELARGD' 'PELARGD' 'num';...
 'PECIBLE2' 'PECIBLE2' 'str';...
 'PEC2CASE' 'PEC2CASE' 'str';...
 'PEC2P0' 'PEC2P0' 'str';...
 'PEC2P1' 'PEC2P1' 'str';...
 'PEC2P2' 'PEC2P2' 'str';...
 'PEC2P3' 'PEC2P3' 'str';...
 'PEAMPGG' 'PEAMPGG' 'num';...
 'PEFREQGG' 'PEFREQGG' 'num';...
 'PELARGG' 'PELARGG' 'num';...
 'SCIBLE' 'SCIBLE' 'str';...
 'PSCIBLE1' 'PSCIBLE1' 'str';...
 'PSC1CASE' 'PSC1CASE' 'str';...
 'PSC1P0' 'PSC1P0' 'str';...
 'PSC1P1' 'PSC1P1' 'str';...
 'PSC1P2' 'PSC1P2' 'str';...
 'PSC1P3' 'PSC1P3' 'str';...
 'PSAMPGD' 'PSAMPGD' 'num';...
 'PSFREQGD' 'PSFREQGD' 'num';...
 'PSLARGD' 'PSLARGD' 'num';...
 'PSCIBLE2' 'PSCIBLE2' 'str';...
 'PSC2CASE' 'PSC2CASE' 'str';...
 'PSC2P0' 'PSC2P0' 'str';...
 'PSC2P1' 'PSC2P1' 'str';...
 'PSC2P2' 'PSC2P2' 'str';...
 'PSC2P3' 'PSC2P3' 'str';...
 'PSAMPGG' 'PSAMPGG' 'num';...
 'PSFREQGG' 'PSFREQGG' 'num';...
 'PSLARGG' 'PSLARGG' 'num';...
 };
 
for i = 1:size(varTable,1)
   ind = strcmp(varTable{i,2},varNames);
   switch varTable{i,3}
      case 'num'
         temp = RAW(:,ind);
         ind2 = cellfun(@isnumeric,temp);
         if any(~ind2)
            temp{~ind2} = NaN;
         end
         cellfun(@isnumeric,RAW(:,ind));
         s2.(varTable{i,1}) = [temp{:}]';
      case 'str'
         s2.(varTable{i,1}) = RAW(:,ind);
      case 'date'
         temp = cellfun(@(x) datestr(x2mdate(x),'mm/dd/yyyy'),RAW(:,ind),'uni',false);
         s2.(varTable{i,1}) = temp;
         if strcmp(varTable{i,1},'DateVisit')
            s2.DateVisit2 = datetime(temp);
            s2.MonthReBaseline = ones(numel(temp),1);
         end
   end
end

% Join the two tables
tab = join(struct2table(s),struct2table(s2));

% Fill in these variables to complete long form table
uid = unique(tab.Id);
vars = {'Sex' 'Age' 'Height'};
for i = 1:numel(vars)
   for j = 1:numel(uid)
      try
         indT = (tab.Id == uid(j)) & ~isnan(tab.(vars{i}));
         indF = (tab.Id == uid(j)) & isnan(tab.(vars{i}));
      catch
         indT = (tab.Id == uid(j)) & ~cellfun(@(x) all(isnan(x)),tab.(vars{i}),'uni',1);
         indF = (tab.Id == uid(j)) & cellfun(@(x) all(isnan(x)),tab.(vars{i}),'uni',1);
      end
      
      tab.(vars{i})(indF) = tab.(vars{i})(indT);
   end
end

% Replace NA for R
ind = strcmp('NA',tab.Treatment);
tab.Treatment(ind) = {'NAc'};

% Rename open visit to something shorter
ind = strcmp('POST-M14',tab.Visit);
tab.Visit(ind) = {'M+14'};

% Rename open condition
ind = strcmp('M14',tab.Condition);
tab.Condition(ind) = {'open'};

% Open Location is wierdly labelled OFF, but is really the optimal
% target/combination
ind = strcmp('open',tab.Condition);
tab.Treatment(ind) = {'OPT'};

% Calculate months from baseline visit
uid = unique(tab.Id);
for i = uid'
   ind = tab.Id == i;
   temp = tab(ind,:).DateVisit2;
   re = calmonths(between(temp(1),temp,'Months'));
   tab.MonthReBaseline(ind) = re;
end

% In Treatment, period specific baselines are labelled according to the
% current target, rename so they are OFF
ind = strncmp('pre',tab.Condition,3);
tab.Treatment(ind) = {'OFFPS'};