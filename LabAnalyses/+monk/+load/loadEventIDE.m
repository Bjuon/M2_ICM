% Import data from delimited text generated by EventIDE
% 
% GNG 
% OneDR

function [hdr,data,ep,window] = loadEventIDE(filename,delimiter,returnObjects)

import monk.*

if nargin < 3
   returnObjects = true;
end

if nargin < 2
   delimiter = ';';
end

if iscell(filename)
   hdr = [];
   data = [];
   for i = 1:numel(filename)
      [th,td] = monk.load.loadEventIDE(filename{i},delimiter,returnObjects);
      hdr = [hdr , th];
      data = [data , td];
   end
   return;
end

if isempty(strfind(filename,'.txt'))
   filename = [filename '.txt'];
end

fid = fopen(filename,'r');
if fid < 0
   error('Cannot read file');
end

% Parse header information
while 1
   str = fgetl(fid);
   if isempty(str)
      break;
   end
   if ~all(str=='*') || isempty(str)
      ind = strfind(str,':');
      fn = strtrim(strrep(str(1:ind-1),' ','_'));
      hdr.(fn) = strtrim(str(ind+1:end));
   end
end

if nargout == 1
   fclose(fid);
   return;
end

% Parse variable names
while 1
   str = fgetl(fid);
   if ~isempty(str)
      break;
   end
end

if str == -1
   data = [];
   return;
end

varNames = strsplit(str,delimiter);
varNames = cellfun(@(x) strtrim(strrep(x,' ','')),varNames,'uni',0);
if isempty(varNames{end})
   varNames(end) = [];
end
nvar = numel(varNames);

% Read data from this point forward as text (in order to deal with comma as decimal)
formatSpec = [];
for i = 1:nvar
   formatSpec = [formatSpec sprintf('%%s')];
end
dataArray = textscan(fid, formatSpec, inf, 'Delimiter', delimiter, 'ReturnOnError', false, 'EndOfLine', '\r\n');
fclose(fid);
%keyboard
switch lower(hdr.Experiment)
%    case 'gonogoctl_v10'
%       numericInd = [2,3,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,35,36,37,38,39,40,41,42,43];
%       task = 'gng';
   case 'gonogoctl_v13'
      numericInd = [1,2,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40];
      task = 'gng';
      trialStartName = 'DefineTrial';
      trialEndName = 'TrialEnd';
      replaceName = {'MeasuredWaiting' 'MeasuredWaitingDuration'};
   case {'gonogoctl_v14'}
      numericInd = [1,2,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41];
      task = 'gng';
      trialStartName = 'DefineTrial';
      trialEndName = 'TrialEnd';
      replaceName = {'MeasuredWaiting' 'MeasuredWaitingDuration'};
   case {'gonogoctl_v15'}
      numericInd = [1,2,4,5,6,7,8,10,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42];
      task = 'gng';
      trialStartName = 'DefineTrial';
      trialEndName = 'TrialEnd';
   case {'gonogoctl_v16'}
      numericInd = [1,2,4,5,6,7,8,10,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43];
      task = 'gng';
      trialStartName = 'DefineTrial';
      trialEndName = 'TrialEnd';
   case {'gonogoctl_v17'}
      % NOTE THIS VERSION IS A TEST AND THERE IS NO TARGET LOCATION INFORMATION
      numericInd = [1,2,4,5,6,7,8,10,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43];
      task = 'gng';
      trialStartName = 'DefineTrial';
      trialEndName = 'TrialEnd';
   case {'gonogoctl_v18' 'gonogoctl_v19'}
      numericInd = [1,2,3,4,6,7,8,9,10,12,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45];
      task = 'gng';
      trialStartName = 'DefineTrial';
      trialEndName = 'TrialEnd';
   case {'gonogoctl_v20'}
      numericInd = [1,2,3,4,6,7,8,9,10,11,13,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46];
      task = 'gng';
      trialStartName = 'DefineTrial';
      trialEndName = 'TrialEnd';
   case {'gonogoctl_v21'}
      numericInd = [1,2,3,4,6,7,8,9,10,11,13,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46];
      task = 'gng';
      trialStartName = 'DefineTrial';
      trialEndName = 'TrialEnd';
   case {'adr_v3' 'adr_v4' 'adr_v5' 'adr_v6' 'adr_v7' 'adr_v8'} % TODO VERIFY FOR v6-v8
      numericInd = [1,2,3,5,6,7,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32];
      task = 'adr';
      trialStartName = 'DefineTrial';
      trialEndName = 'TrialEnd';
   case {'1dr_v14' '1dr_v15'}
      numericInd = [1,2,3,5,6,7,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32];
      task = '1dr';
      trialStartName = 'DefineTrial';
      trialEndName = 'TrialEnd';
   case {'1dr_v10','1dr_v13'}
      numericInd = [1,2,3,5,6,7,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];
      task = '1dr';
      trialStartName = '';
      trialEndName = 'TrialEnd';
%    case '1dr_v8'
%       numericInd = [3,4,5,7,8,9,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32];
%       task = '1dr';
   otherwise
      error('unknown version');
end

% Some versions stored column names that break automatic parsing below,
% replace these here
if exist('replaceName','var')
   for i = 1:size(replaceName,1)
      ind = strcmp(varNames,replaceName{i,1});
      varNames{ind} = replaceName{i,2};
   end
end

% Convert selected columns to numeric
for col = numericInd
   temp = strrep(dataArray{col},',','.'); % , is used for decimal
   try
   dataArray{col} = reshape(sscanf(sprintf('%s#', temp{:}), '%g#'), size(temp));
   catch, keyboard; end
end

if returnObjects
   indTimeSensitive = find(cellfun(@(x) ~isempty(strfind(x,'OnsetTime')),varNames));
   eventNames = replace(varNames(indTimeSensitive),'OnsetTime','');
   for i = 1:numel(eventNames)
      epLabel(i) = metadata.Label('name',eventNames{i});
      switch eventNames{i}
         case {'Fixation' 'Target' 'Cue'}
            epLabel(i).color = [0.301960784313725 0.686274509803922 0.290196078431373];
         case {'Response'}
            epLabel(i).color = [0.215686274509804 0.494117647058824 0.721568627450980];
         case {'Abort'}
            epLabel(i).color = [1 0 0];
         otherwise
            epLabel(i).color = [.2 .2 .9];
      end
   end

   % Pre-allocate object array
   nTrials = numel(dataArray{1});
   if strcmp(task,'1dr')
      data(nTrials) = OneDRMonkey();
   elseif strcmp(task,'adr')
      data(nTrials) = AllDRMonkey();
   else
      data(nTrials) = GoNogoMonkey();
   end
   [data.Date] = deal(hdr.Date);
   
   indTimeInsensitive = find(cellfun(@(x) isempty(strfind(x,'OnsetTime')) && isempty(strfind(x,'Measured')),varNames));
   for j = indTimeInsensitive
      temp = dataArray{j};
      if isnumeric(temp)
         temp = num2cell(temp);
         [data(:).(varNames{j})] = temp{:};
         continue
      end
      for i = 1:nTrials
         if strcmpi(temp{i},'true') % Convert booleans
            data(i).(varNames{j}) = 1;
         elseif strcmpi(dataArray{j}{i},'false') % Convert booleans
            data(i).(varNames{j}) = 0;
         else
            data(i).(varNames{j}) = temp{i};
         end
      end
   end
   
   if nargout > 2
      count = 1;
      gev = metadata.event.Generic();
      tev = metadata.event.Response();
      rtLabel = metadata.Label('name','Liftoff');
      ttLabel = metadata.Label('name','Touch');
      tempNames = replace(varNames,'OnsetTime','');
      for k = indTimeSensitive
         tStart = dataArray{k}/1000;
         ind2 = strcmp(eventNames,tempNames{k});
         ind3 = strcmp(varNames,['Measured' eventNames{ind2} 'Duration']);
         tEnd = tStart + dataArray{ind3}/1000;
         for i = 1:nTrials
            if i > 1
               % for trials where an event did not occur, EventIDE writes the
               % last recorded time, so we ignore them here
               if tStart(i) == tStart(i-1)
                  continue;
               end
            end
            
            if ~(tStart(i)==tEnd(i))
               gev.tStart = tStart(i);
               gev.tEnd = tEnd(i);
               gev.name = epLabel(ind2);
               ev(count) = gev;
               count = count + 1;
               
               if strcmp(tempNames{k},'Response') && strcmp(task,'1dr')
                  if data(i).RT > 0
                     tev.tStart = tStart(i) + data(i).RT/1000;
                     tev.tEnd = tStart(i) + data(i).RT/1000 + .01;
                     tev.name = rtLabel;
                     ev(count) = tev;
                     count = count + 1;
                     
                     if data(i).TT > 0
                        tev.tStart = tStart(i) + data(i).TT/1000;
                        tev.tEnd = tStart(i) + data(i).TT/1000 + .01;
                        tev.name = ttLabel;
                        ev(count) = tev;
                        count = count + 1;
                     end
                  end
               elseif strcmp(tempNames{k},'Target') && strcmp(task,'gng')
                  if data(i).RT > 0
                     tev.tStart = tStart(i) + data(i).RT/1000;
                     tev.tEnd = tStart(i) + data(i).RT/1000 + .01;
                     tev.name = rtLabel;
                     ev(count) = tev;
                     count = count + 1;
                     
                     if data(i).TT > 0
                        tev.tStart = tStart(i) + data(i).TT/1000;
                        tev.tEnd = tStart(i) + data(i).TT/1000 + .01;
                        tev.name = ttLabel;
                        ev(count) = tev;
                        count = count + 1;
                     end
                  end
               end
            end
            
         end
      end
      
      ep = EventProcess(struct('events',ev,'labels','trialEvents'));
      %ep = EventProcess('events',ev,'labels','trialEvents');
      
      ind = strcmp(varNames,[trialStartName 'OnsetTime']);
      trial_tStart = dataArray{ind};
      
      ind = strcmp(varNames,[trialEndName 'OnsetTime']);
      trial_tEnd = dataArray{ind};
      
      % Use duration of TrialEnd
      %ind = strcmp(varNames,['Measured' trialEndName 'Duration']);
      %trial_tEnd = trial_tEnd + dataArray{ind};
      % Else take constant time
      trial_tEnd = trial_tEnd + 1000;

      window = [trial_tStart, trial_tEnd]./1000;
      
      ep.window = roundToSample(window,1/1000);
      %tic;
      ep.chop('shiftToWindow',true,'copyInfo',false);
      %toc
   end
else
   % Setup and preallocate output structure
   data = struct();
   for i = 1:nvar
      data.(varNames{i}) = [];
   end
   data(numel(dataArray{1})) = data;
   
   for i = 1:numel(data)
      for j = 1:nvar
         if iscell(dataArray{j})
            if strcmpi(dataArray{j}{i},'true') % Convert booleans
               data(i).(varNames{j}) = true;
            elseif strcmpi(dataArray{j}{i},'false') % Convert booleans
               data(i).(varNames{j}) = false;
            else
               data(i).(varNames{j}) = dataArray{j}{i};
            end
         else
            data(i).(varNames{j}) = dataArray{j}(i);
         end
      end
   end
   
   if nargout > 2
      ep = [];
   end
end